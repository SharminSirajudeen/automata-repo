version: '3.8'

services:
  # PostgreSQL Database with optimizations for production
  postgres:
    image: postgres:15-alpine
    container_name: automata_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: automata_db
      POSTGRES_USER: automata
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U automata -d automata_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      postgres
        -c max_connections=200
        -c shared_buffers=256MB
        -c effective_cache_size=1GB
        -c work_mem=4MB
        -c maintenance_work_mem=64MB
        -c random_page_cost=1.1
        -c temp_file_limit=2GB
        -c log_min_duration_statement=1000
        -c log_connections=on
        -c log_disconnections=on
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - automata_network

  # Redis Cache with persistence and optimization
  redis:
    image: redis:7-alpine
    container_name: automata_redis_prod
    restart: unless-stopped
    command: >
      redis-server
        --appendonly yes
        --appendfsync everysec
        --maxmemory 512mb
        --maxmemory-policy allkeys-lru
        --tcp-keepalive 60
        --timeout 300
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - automata_network

  # Backend API with production optimizations
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
      target: production
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: automata-backend:latest
    container_name: automata_backend_prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://automata:${POSTGRES_PASSWORD}@postgres:5432/automata_db
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 30
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_CACHE_TTL: 3600
      # Security
      SECRET_KEY_FILE: /run/secrets/secret_key
      CORS_ORIGINS: "${FRONTEND_URL},https://*.vast.ai"
      # Performance
      WORKERS: 4
      WORKER_CLASS: uvicorn.workers.UvicornWorker
      MAX_REQUESTS: 1000
      MAX_REQUESTS_JITTER: 100
      TIMEOUT: 120
      KEEPALIVE: 2
      # Logging
      LOG_LEVEL: info
      ACCESS_LOG: true
      # AI/ML
      OLLAMA_BASE_URL: "${OLLAMA_BASE_URL:-http://host.docker.internal:11434}"
      OPENAI_API_KEY_FILE: /run/secrets/openai_api_key
      # Monitoring
      PROMETHEUS_METRICS: true
      HEALTH_CHECK_INTERVAL: 30
    secrets:
      - secret_key
      - openai_api_key
    volumes:
      - app_logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "127.0.0.1:8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - automata_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend with Nginx reverse proxy
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
      target: production
      args:
        BUILDKIT_INLINE_CACHE: 1
        VITE_API_URL: "${API_URL}"
        VITE_WS_URL: "${WS_URL}"
    image: automata-frontend:latest
    container_name: automata_frontend_prod
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NGINX_WORKER_PROCESSES: auto
      NGINX_WORKER_CONNECTIONS: 1024
    volumes:
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx-ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - automata_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: automata_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - automata_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: automata_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "127.0.0.1:3001:3000"
    networks:
      - automata_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

# Secrets management
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  secret_key:
    file: ./secrets/secret_key.txt
  openai_api_key:
    file: ./secrets/openai_api_key.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

# Persistent volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network configuration
networks:
  automata_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16