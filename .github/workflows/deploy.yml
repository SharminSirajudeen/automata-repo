name: 🚀 Deploy Automata Platform to vast.ai

on:
  push:
    branches: [main, production]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker/**'
      - 'k8s/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests and deploy directly'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: registry.vast.ai
  IMAGE_PREFIX: automata
  DOCKER_BUILDKIT: 1
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1

jobs:
  # Security and code quality checks
  security:
    name: 🔒 Security & Quality Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, python

    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Frontend tests and build
  frontend:
    name: 🎨 Frontend Tests & Build
    runs-on: ubuntu-latest
    if: inputs.skip_tests != true
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📋 Install dependencies
      run: npm ci

    - name: 🧪 Run linting
      run: npm run lint

    - name: 🔧 Type checking
      run: npm run type-check

    - name: 🏗️ Build application
      run: npm run build
      env:
        VITE_API_URL: https://api.automata.vast.ai
        VITE_WS_URL: wss://api.automata.vast.ai/ws

    - name: 📦 Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

    - name: 🧪 Run bundle analyzer
      run: npm run bundle-analyze
      continue-on-error: true

  # Backend tests and build
  backend:
    name: 🔧 Backend Tests & Build
    runs-on: ubuntu-latest
    if: inputs.skip_tests != true
    
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: 📋 Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: 🧪 Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html tests/
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        OPENAI_API_KEY: sk-test-key

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

    - name: 🔍 Lint with ruff
      run: |
        pip install ruff
        ruff check app/
      continue-on-error: true

    - name: 🔧 Type checking with mypy
      run: |
        pip install mypy
        mypy app/
      continue-on-error: true

  # Build and push Docker images
  build:
    name: 🐳 Build & Push Images
    runs-on: ubuntu-latest
    needs: [security, frontend, backend]
    if: always() && (needs.security.result == 'success' || needs.security.result == 'skipped') && (inputs.skip_tests == true || (needs.frontend.result == 'success' && needs.backend.result == 'success'))
    
    strategy:
      matrix:
        service: [frontend, backend]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔐 Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host

    - name: 🔧 Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./docker/Dockerfile.${{ matrix.service }}
        target: production
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VITE_API_URL=https://api.automata.vast.ai
          VITE_WS_URL=wss://api.automata.vast.ai/ws

    - name: 🔍 Scan image for vulnerabilities
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: '${{ matrix.service }}-image-scan.sarif'

    - name: 📊 Upload image scan results
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: '${{ matrix.service }}-image-scan.sarif'

  # Deploy to staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.automata.vast.ai
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.VAST_AI_KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: 🧪 Test cluster connectivity
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: 🔧 Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.13.2'

    - name: 🚀 Deploy to staging
      run: |
        export IMAGE_TAG="${{ github.sha }}"
        export ENVIRONMENT="staging"
        export DOMAIN="staging.automata.vast.ai"
        export SKIP_BUILD="true"
        ./scripts/deploy-vast.sh
      env:
        POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.STAGING_REDIS_PASSWORD }}
        SECRET_KEY: ${{ secrets.STAGING_SECRET_KEY }}
        JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: 🧪 Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Test frontend
        curl -f -s "https://staging.automata.vast.ai/health" || exit 1
        
        # Test backend API
        curl -f -s "https://api.staging.automata.vast.ai/health" || exit 1
        
        echo "✅ Smoke tests passed"

    - name: 📊 Update deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            environment_url: 'https://staging.automata.vast.ai',
            description: 'Deployment to staging successful'
          });

  # Deploy to production
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/production' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment:
      name: production
      url: https://automata.vast.ai
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.VAST_AI_KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: 🧪 Test cluster connectivity
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: 🔧 Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.13.2'

    - name: 📊 Pre-deployment health check
      run: |
        # Check current deployment health
        kubectl get deployments -n automata-app || echo "No existing deployment"
        kubectl get pods -n automata-app || echo "No existing pods"

    - name: 🚀 Deploy to production
      run: |
        export IMAGE_TAG="${{ github.sha }}"
        export ENVIRONMENT="production"
        export DOMAIN="automata.vast.ai"
        export SKIP_BUILD="true"
        export SETUP_MONITORING="true"
        ./scripts/deploy-vast.sh
      env:
        POSTGRES_PASSWORD: ${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.PRODUCTION_REDIS_PASSWORD }}
        SECRET_KEY: ${{ secrets.PRODUCTION_SECRET_KEY }}
        JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🧪 Production health checks
      run: |
        # Wait for deployment rollout
        kubectl rollout status deployment/automata-frontend -n automata-app --timeout=600s
        kubectl rollout status deployment/automata-backend -n automata-app --timeout=600s
        
        # Wait additional time for ingress to be ready
        sleep 120
        
        # Comprehensive health checks
        echo "🔍 Testing frontend..."
        curl -f -s -w "%{http_code}" "https://automata.vast.ai/health" | grep -q "200" || exit 1
        
        echo "🔍 Testing backend API..."
        curl -f -s -w "%{http_code}" "https://api.automata.vast.ai/health" | grep -q "200" || exit 1
        
        echo "🔍 Testing WebSocket endpoint..."
        curl -f -s -w "%{http_code}" "https://api.automata.vast.ai/ws" | grep -q "200\|101" || exit 1
        
        echo "✅ All production health checks passed"

    - name: 📊 Update deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            environment_url: 'https://automata.vast.ai',
            description: 'Deployment to production successful'
          });

    - name: 🎉 Send success notification
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const sha = context.sha.substring(0, 7);
          const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
          
          github.rest.issues.createComment({
            owner,
            repo,
            issue_number: context.payload.pull_request?.number || 1,
            body: `🎉 **Deployment Successful!**
            
            - **Environment**: Production
            - **Version**: \`${sha}\`
            - **URL**: https://automata.vast.ai
            - **Deployment**: [View Details](${runUrl})
            
            The Automata Theory Learning Platform has been successfully deployed to vast.ai! 🚀`
          }).catch(() => {
            // Ignore error if not in PR context
            console.log('Skipping comment creation - not in PR context');
          });

  # Cleanup and rollback (manual trigger)
  rollback:
    name: ↩️ Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'rollback'
    environment:
      name: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.VAST_AI_KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: ↩️ Rollback to previous version
      run: |
        kubectl rollout undo deployment/automata-frontend -n automata-app
        kubectl rollout undo deployment/automata-backend -n automata-app
        
        # Wait for rollback to complete
        kubectl rollout status deployment/automata-frontend -n automata-app --timeout=300s
        kubectl rollout status deployment/automata-backend -n automata-app --timeout=300s

    - name: 🧪 Post-rollback health checks
      run: |
        sleep 60
        curl -f -s "https://automata.vast.ai/health" || exit 1
        curl -f -s "https://api.automata.vast.ai/health" || exit 1
        echo "✅ Rollback completed successfully"