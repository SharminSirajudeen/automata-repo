{{- if .Values.backend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "automata-app.fullname" . }}-backend
  namespace: {{ include "automata-app.namespace" . }}
  labels:
    {{- include "automata-app.backend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.backend.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "automata-app.backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "automata-app.backend.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- if .Values.monitoring.serviceMonitor.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        {{- end }}
    spec:
      serviceAccountName: {{ include "automata-app.serviceAccountName" . }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: db-migrate
        image: {{ include "automata-app.image" (dict "repository" .Values.backend.image.repository "tag" .Values.backend.image.tag "Chart" .Chart "Values" .Values) }}
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        command: ["python", "-c", "from app.database import init_db; init_db()"]
        env:
          {{- include "automata-app.commonEnv" . | nindent 10 }}
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      containers:
      - name: backend
        image: {{ include "automata-app.image" (dict "repository" .Values.backend.image.repository "tag" .Values.backend.image.tag "Chart" .Chart "Values" .Values) }}
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        {{- if .Values.monitoring.enabled }}
        - name: metrics
          containerPort: 9090
          protocol: TCP
        {{- end }}
        env:
          {{- include "automata-app.commonEnv" . | nindent 10 }}
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: {{ include "automata-app.fullname" . }}-config
              key: corsOrigins
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: {{ include "automata-app.fullname" . }}-config
              key: logLevel
        - name: POOL_SIZE
          valueFrom:
            configMapKeyRef:
              name: {{ include "automata-app.fullname" . }}-config
              key: poolSize
        - name: MAX_OVERFLOW
          valueFrom:
            configMapKeyRef:
              name: {{ include "automata-app.fullname" . }}-config
              key: maxOverflow
        - name: POOL_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: {{ include "automata-app.fullname" . }}-config
              key: poolTimeout
        - name: CDN_ENABLED
          valueFrom:
            configMapKeyRef:
              name: {{ include "automata-app.fullname" . }}-config
              key: cdnEnabled
        - name: CDN_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: {{ include "automata-app.fullname" . }}-config
              key: cdnBaseUrl
        - name: ENABLE_METRICS
          valueFrom:
            configMapKeyRef:
              name: {{ include "automata-app.fullname" . }}-config
              key: enableMetrics
        {{- if .Values.secrets.openaiApiKey }}
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "automata-app.fullname" . }}-secrets
              key: openaiApiKey
        {{- end }}
        {{- if .Values.secrets.anthropicApiKey }}
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "automata-app.fullname" . }}-secrets
              key: anthropicApiKey
        {{- end }}
        {{- if .Values.secrets.cdnApiToken }}
        - name: CDN_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ include "automata-app.fullname" . }}-secrets
              key: cdnApiToken
        {{- end }}
        {{- if .Values.secrets.cdnZoneId }}
        - name: CDN_ZONE_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "automata-app.fullname" . }}-secrets
              key: cdnZoneId
        {{- end }}
        {{- range $key, $value := .Values.backend.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- with .Values.backend.livenessProbe }}
        livenessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.backend.readinessProbe }}
        readinessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.backend.startupProbe }}
        startupProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.backend.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.backend.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}