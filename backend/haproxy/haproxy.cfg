# HAProxy Configuration for Automata Learning Platform
# Advanced Layer 7 Load Balancing with Circuit Breaker Pattern

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # Process management
    daemon
    maxconn 40000
    user haproxy
    group haproxy
    
    # Performance tuning
    nbproc 1
    nbthread 4
    cpu-map auto:1/1-4 0-3
    
    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-server-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11
    
    # Logging
    log stdout local0 info
    
    # Stats socket for runtime management
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 2m
    
    # Tune SSL
    tune.ssl.default-dh-param 2048
    tune.ssl.capture-cipherlist-size 1
    tune.ssl.capture-buffer-size 1

#---------------------------------------------------------------------
# Default settings
#---------------------------------------------------------------------
defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option redispatch
    
    # Timeouts
    timeout connect 5s
    timeout client 50s
    timeout server 50s
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 5s
    
    # Error files
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http
    
    # Health check
    option httpchk GET /healthz HTTP/1.1\r\nHost:\ automata.example.com

#---------------------------------------------------------------------
# Frontend configurations
#---------------------------------------------------------------------

# HTTP frontend - redirect to HTTPS
frontend http_frontend
    bind :80
    mode http
    
    # Redirect all HTTP traffic to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Main HTTPS frontend
frontend https_frontend
    bind :443 ssl crt /etc/ssl/certs/automata.pem alpn h2,http/1.1
    mode http
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "SAMEORIGIN"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting using stick tables
    stick-table type ip size 100k expire 30s store http_req_rate(10s),http_err_rate(10s),conn_cur
    
    # Track request rates
    http-request track-sc0 src
    
    # DDoS protection - block if too many requests
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # Block if too many errors
    http-request deny if { sc_http_err_rate(0) gt 10 }
    
    # Capture headers for logging
    capture request header Host len 64
    capture request header User-Agent len 128
    capture request header X-Forwarded-For len 64
    
    # Request routing based on path
    
    # Authentication endpoints - use session affinity
    use_backend auth_backend if { path_beg /auth/ }
    
    # AI-intensive endpoints - use dedicated backend
    use_backend ai_backend if { path_beg /api/ai/ } || { path_beg /api/langgraph/ } || { path_beg /api/learning/ }
    
    # WebSocket connections - sticky sessions
    use_backend websocket_backend if { hdr(Upgrade) -i websocket }
    
    # API endpoints - general backend
    use_backend api_backend if { path_beg /api/ }
    
    # Health checks
    use_backend health_backend if { path_beg /health }
    
    # Metrics (restricted access)
    use_backend metrics_backend if { path_beg /metrics } { src 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 }
    
    # Default backend for everything else
    default_backend main_backend

#---------------------------------------------------------------------
# Backend configurations
#---------------------------------------------------------------------

# Main backend - round robin
backend main_backend
    balance roundrobin
    option httpchk GET /healthz
    
    # Circuit breaker configuration
    option redispatch
    retries 3
    
    # Servers
    server backend-1 backend-1:8000 check inter 5s rise 2 fall 3 weight 100 maxconn 1000
    server backend-2 backend-2:8000 check inter 5s rise 2 fall 3 weight 100 maxconn 1000
    server backend-3 backend-3:8000 check inter 5s rise 2 fall 3 weight 100 maxconn 1000
    server backend-4 backend-4:8000 check inter 5s rise 2 fall 3 weight 50 maxconn 500 backup
    
    # Health check configuration
    http-check expect status 200
    
    # Connection pooling
    http-reuse aggressive

# Authentication backend - least connections with session persistence
backend auth_backend
    balance leastconn
    option httpchk GET /healthz
    
    # Session persistence using cookies
    cookie SERVERID insert indirect nocache
    
    # Circuit breaker - fail fast for auth
    retries 2
    timeout server 30s
    
    # Servers
    server backend-1 backend-1:8000 check inter 3s rise 2 fall 2 weight 100 cookie backend-1
    server backend-2 backend-2:8000 check inter 3s rise 2 fall 2 weight 100 cookie backend-2
    server backend-3 backend-3:8000 check inter 3s rise 2 fall 2 weight 100 cookie backend-3
    
    http-check expect status 200

# AI backend - specialized for AI workloads
backend ai_backend
    balance leastconn
    option httpchk GET /healthz
    
    # Longer timeouts for AI processing
    timeout server 300s
    timeout connect 10s
    
    # Circuit breaker with higher thresholds
    retries 2
    option redispatch
    
    # Dedicated AI servers
    server ai-backend-1 ai-backend-1:8000 check inter 10s rise 2 fall 3 weight 200 maxconn 500
    server ai-backend-2 ai-backend-2:8000 check inter 10s rise 2 fall 3 weight 200 maxconn 500
    
    # Fallback to regular backends with lower weight
    server backend-1 backend-1:8000 check inter 5s rise 2 fall 3 weight 50 maxconn 200 backup
    server backend-2 backend-2:8000 check inter 5s rise 2 fall 3 weight 50 maxconn 200 backup
    
    http-check expect status 200

# API backend - general API endpoints
backend api_backend
    balance roundrobin
    option httpchk GET /healthz
    
    # Standard configuration
    retries 3
    timeout server 60s
    
    # Rate limiting per backend
    stick-table type ip size 10k expire 10s store http_req_rate(10s)
    http-request track-sc1 src
    
    # Servers
    server backend-1 backend-1:8000 check inter 5s rise 2 fall 3 weight 100
    server backend-2 backend-2:8000 check inter 5s rise 2 fall 3 weight 100
    server backend-3 backend-3:8000 check inter 5s rise 2 fall 3 weight 100
    
    http-check expect status 200

# WebSocket backend - session affinity
backend websocket_backend
    balance source
    option httpchk GET /healthz
    
    # WebSocket specific settings
    timeout tunnel 86400s
    timeout server 86400s
    
    # Sticky sessions essential for WebSocket
    hash-type consistent
    
    # Servers
    server backend-1 backend-1:8000 check inter 5s rise 2 fall 3 weight 100
    server backend-2 backend-2:8000 check inter 5s rise 2 fall 3 weight 100
    server backend-3 backend-3:8000 check inter 5s rise 2 fall 3 weight 100
    
    http-check expect status 200

# Health check backend
backend health_backend
    balance roundrobin
    option httpchk GET /healthz
    
    # Fast health checks
    timeout server 10s
    retries 1
    
    # All servers for health checks
    server backend-1 backend-1:8000 check inter 2s rise 1 fall 2
    server backend-2 backend-2:8000 check inter 2s rise 1 fall 2
    server backend-3 backend-3:8000 check inter 2s rise 1 fall 2
    
    http-check expect status 200

# Metrics backend - monitoring only
backend metrics_backend
    balance roundrobin
    option httpchk GET /healthz
    
    # Metrics from all servers
    server backend-1 backend-1:8000 check inter 5s
    server backend-2 backend-2:8000 check inter 5s
    server backend-3 backend-3:8000 check inter 5s
    
    http-check expect status 200

#---------------------------------------------------------------------
# Statistics and monitoring
#---------------------------------------------------------------------
frontend stats_frontend
    bind :8404
    mode http
    
    # Restrict access to monitoring networks
    acl monitoring_networks src 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 127.0.0.1
    http-request deny unless monitoring_networks
    
    # Basic auth (change credentials)
    stats enable
    stats uri /haproxy-stats
    stats realm HAProxy\ Statistics
    stats auth admin:secure_password_here
    stats refresh 30s
    stats show-legends
    stats show-node
    stats admin if TRUE
    
    # Custom stats page
    http-request use-service prometheus-exporter if { path /metrics }

#---------------------------------------------------------------------
# Error handling and circuit breaker
#---------------------------------------------------------------------

# Global error tracking
backend error_tracker
    # Track global error rates
    stick-table type string len 32 size 1k expire 60s store http_err_rate(60s)

# Circuit breaker logic
frontend circuit_breaker
    bind :9000
    mode http
    
    # Monitor backend health
    monitor-uri /circuit-breaker-status
    
    # Custom health check responses
    http-request return status 503 content-type "application/json" string '{"status":"circuit_open","message":"Circuit breaker is open"}' if { nbsrv(main_backend) lt 1 }
    http-request return status 200 content-type "application/json" string '{"status":"circuit_closed","healthy_servers":"' if { nbsrv(main_backend) ge 2 }

#---------------------------------------------------------------------
# Advanced features
#---------------------------------------------------------------------

# Global rate limiting using maps
backend rate_limit_backend
    # Define rate limits per endpoint
    map-file /etc/haproxy/rate_limits.map rate_limits
    
    # Custom rate limiting logic
    http-request deny if { path_beg /api/ai/ } { sc_http_req_rate(0) gt 5 }
    http-request deny if { path_beg /auth/ } { sc_http_req_rate(0) gt 3 }

# A/B Testing support
backend ab_testing
    balance roundrobin
    
    # Version A servers
    server backend-a1 backend-a1:8000 check weight 50
    server backend-a2 backend-a2:8000 check weight 50
    
    # Version B servers  
    server backend-b1 backend-b1:8000 check weight 50
    server backend-b2 backend-b2:8000 check weight 50

# Canary deployment backend
backend canary_backend
    balance roundrobin
    
    # Stable version (90% traffic)
    server stable-1 backend-stable-1:8000 check weight 90
    server stable-2 backend-stable-2:8000 check weight 90
    
    # Canary version (10% traffic)
    server canary-1 backend-canary-1:8000 check weight 10