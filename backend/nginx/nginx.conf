# NGINX Load Balancer Configuration for Automata Learning Platform
# Designed for high availability and 10,000+ concurrent connections

# Main context configurations
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimize for high concurrency
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    server_tokens off;
    
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=websocket:10m rate=20r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # DDoS protection
    limit_req_status 429;
    limit_conn_status 429;
    
    # Real IP configuration for proxy setups
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Backend server pools
    
    # Round-robin backend pool
    upstream backend_round_robin {
        server backend-1:8000 max_fails=3 fail_timeout=30s;
        server backend-2:8000 max_fails=3 fail_timeout=30s;
        server backend-3:8000 max_fails=3 fail_timeout=30s;
        server backend-4:8000 backup;  # Backup server
        
        # Health checks
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # Least connections pool for CPU-intensive operations
    upstream backend_least_conn {
        least_conn;
        server backend-1:8000 weight=3 max_fails=3 fail_timeout=30s;
        server backend-2:8000 weight=3 max_fails=3 fail_timeout=30s;
        server backend-3:8000 weight=2 max_fails=3 fail_timeout=30s;
        server backend-4:8000 weight=1 backup;
        
        keepalive 32;
    }
    
    # IP hash pool for session affinity
    upstream backend_ip_hash {
        ip_hash;
        server backend-1:8000 max_fails=3 fail_timeout=30s;
        server backend-2:8000 max_fails=3 fail_timeout=30s;
        server backend-3:8000 max_fails=3 fail_timeout=30s;
        
        keepalive 16;
    }
    
    # WebSocket-specific pool with session affinity
    upstream websocket_backend {
        ip_hash;  # Ensure WebSocket connections stick to same server
        server backend-1:8000 max_fails=2 fail_timeout=10s;
        server backend-2:8000 max_fails=2 fail_timeout=10s;
        server backend-3:8000 max_fails=2 fail_timeout=10s;
        
        keepalive 64;
        keepalive_requests 1000;
    }
    
    # AI services pool (may need more resources)
    upstream ai_backend {
        least_conn;
        server ai-backend-1:8000 weight=2 max_fails=3 fail_timeout=60s;
        server ai-backend-2:8000 weight=2 max_fails=3 fail_timeout=60s;
        server backend-1:8000 weight=1 max_fails=3 fail_timeout=30s backup;
        
        keepalive 16;
    }
    
    # Health check configuration
    map $upstream_addr $pool_name {
        ~backend-[0-9]+ "main_backend";
        ~ai-backend-[0-9]+ "ai_backend";
        default "unknown";
    }
    
    # Main server configuration
    server {
        listen 80;
        listen [::]:80;
        server_name automata.example.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name automata.example.com;
        
        # SSL certificates (update paths as needed)
        ssl_certificate /etc/ssl/certs/automata.crt;
        ssl_certificate_key /etc/ssl/private/automata.key;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' wss: ws:;" always;
        
        # Connection limits
        limit_conn conn_limit_per_ip 20;
        
        # Root location - API documentation
        location / {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://backend_round_robin;
            include /etc/nginx/proxy_params;
        }
        
        # Authentication endpoints - stricter rate limiting
        location /auth/ {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://backend_least_conn;
            include /etc/nginx/proxy_params;
            
            # Additional security for auth
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # API endpoints - balanced load
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://backend_round_robin;
            include /etc/nginx/proxy_params;
        }
        
        # AI-intensive endpoints
        location ~ ^/api/(ai|langgraph|learning)/ {
            limit_req zone=api burst=30 nodelay;
            proxy_pass http://ai_backend;
            include /etc/nginx/proxy_params;
            
            # Longer timeouts for AI operations
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
        
        # WebSocket connections with session affinity
        location /ws/ {
            limit_req zone=websocket burst=100 nodelay;
            proxy_pass http://websocket_backend;
            
            # WebSocket specific headers
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 86400s;
            proxy_read_timeout 86400s;
            
            # Disable buffering for real-time communication
            proxy_buffering off;
            proxy_cache off;
        }
        
        # Static file serving (if any)
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }
        
        # Health check endpoints
        location /health {
            access_log off;
            proxy_pass http://backend_round_robin;
            include /etc/nginx/proxy_params;
        }
        
        location /healthz {
            access_log off;
            proxy_pass http://backend_round_robin;
            include /etc/nginx/proxy_params;
        }
        
        # Metrics endpoint (restrict access)
        location /metrics {
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://backend_round_robin;
            include /etc/nginx/proxy_params;
        }
        
        # Internal status for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
        }
        
        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /var/www/html;
            internal;
        }
        
        location = /404.html {
            root /var/www/html;
            internal;
        }
    }
    
    # Separate server for internal health checks
    server {
        listen 8080;
        server_name _;
        
        location /health/nginx {
            access_log off;
            return 200 '{"status":"healthy","service":"nginx"}\n';
            add_header Content-Type application/json;
        }
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow all;
        }
    }
}

# Stream configuration for TCP/UDP load balancing (if needed)
stream {
    # For database connections or other TCP services
    upstream database_pool {
        server db-1:5432 max_fails=3 fail_timeout=30s;
        server db-2:5432 max_fails=3 fail_timeout=30s;
    }
    
    server {
        listen 5432;
        proxy_pass database_pool;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_connect_timeout 1s;
    }
}