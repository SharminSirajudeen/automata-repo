# Docker Compose for Load Balancer Testing
# Used for local development and testing of load balancing configurations

version: '3.8'

services:
  # NGINX Load Balancer
  nginx-lb:
    image: nginx:alpine
    container_name: automata-nginx-lb
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Health check port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/proxy_params:/etc/nginx/proxy_params
      - ./ssl:/etc/ssl/certs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    networks:
      - automata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/nginx"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HAProxy Load Balancer (alternative)
  haproxy-lb:
    image: haproxy:2.4-alpine
    container_name: automata-haproxy-lb
    ports:
      - "8000:80"
      - "8443:443"
      - "8404:8404"  # Stats port
      - "9000:9000"  # Circuit breaker port
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./haproxy/rate_limits.map:/etc/haproxy/rate_limits.map
      - ./ssl:/etc/ssl/certs
      - ./logs/haproxy:/var/log/haproxy
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    networks:
      - automata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8404/haproxy-stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Instance 1
  backend-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: automata-backend-1
    ports:
      - "8001:8000"
    environment:
      - INSTANCE_ID=backend-1
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/automata
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ./app:/app/app
      - ./logs/backend-1:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - automata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Instance 2
  backend-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: automata-backend-2
    ports:
      - "8002:8000"
    environment:
      - INSTANCE_ID=backend-2
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/automata
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ./app:/app/app
      - ./logs/backend-2:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - automata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Instance 3
  backend-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: automata-backend-3
    ports:
      - "8003:8000"
    environment:
      - INSTANCE_ID=backend-3
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/automata
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ./app:/app/app
      - ./logs/backend-3:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - automata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Backend Instance 1 (for AI-intensive workloads)
  ai-backend-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: automata-ai-backend-1
    ports:
      - "8011:8000"
    environment:
      - INSTANCE_ID=ai-backend-1
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/automata
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - AI_WORKER=true
    volumes:
      - ./app:/app/app
      - ./logs/ai-backend-1:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - automata-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 15s
      retries: 3

  # AI Backend Instance 2
  ai-backend-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: automata-ai-backend-2
    ports:
      - "8012:8000"
    environment:
      - INSTANCE_ID=ai-backend-2
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/automata
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - AI_WORKER=true
    volumes:
      - ./app:/app/app
      - ./logs/ai-backend-2:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - automata-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 15s
      retries: 3

  # Database
  postgres:
    image: postgres:13-alpine
    container_name: automata-postgres
    environment:
      - POSTGRES_DB=automata
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
    networks:
      - automata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:6-alpine
    container_name: automata-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - automata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: automata-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - automata-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: automata-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - automata-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Load testing tool
  locust:
    image: locustio/locust:latest
    container_name: automata-locust
    ports:
      - "8089:8089"
    volumes:
      - ../load_tests:/mnt/locust
    command: -f /mnt/locust/locustfile.py --host=http://nginx-lb
    networks:
      - automata-network
    depends_on:
      - nginx-lb

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  automata-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16