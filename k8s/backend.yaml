apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: automata-app
  labels:
    app.kubernetes.io/name: automata
    app.kubernetes.io/component: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: automata
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: automata
        app.kubernetes.io/component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      initContainers:
      - name: db-migrate
        image: automata/backend:latest
        command: ["python", "-c", "from app.database import init_db; init_db()"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: automata-secrets
              key: DATABASE_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      containers:
      - name: backend
        image: automata/backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        # Database configuration
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: automata-secrets
              key: DATABASE_URL
        # Redis configuration
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        # Application configuration
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: automata-secrets
              key: SECRET_KEY
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: automata-config
              key: CORS_ORIGINS
        # Performance configuration
        - name: POOL_SIZE
          valueFrom:
            configMapKeyRef:
              name: automata-config
              key: POOL_SIZE
        - name: MAX_OVERFLOW
          valueFrom:
            configMapKeyRef:
              name: automata-config
              key: MAX_OVERFLOW
        - name: POOL_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: automata-config
              key: POOL_TIMEOUT
        # CDN configuration
        - name: CDN_ENABLED
          valueFrom:
            configMapKeyRef:
              name: automata-config
              key: CDN_ENABLED
        - name: CDN_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: automata-config
              key: CDN_BASE_URL
        - name: CDN_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: automata-secrets
              key: CDN_API_TOKEN
        # AI API keys
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: automata-secrets
              key: OPENAI_API_KEY
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: automata-secrets
              key: ANTHROPIC_API_KEY
        # Monitoring
        - name: ENABLE_METRICS
          valueFrom:
            configMapKeyRef:
              name: automata-config
              key: ENABLE_METRICS
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: automata-app
  labels:
    app.kubernetes.io/name: automata
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: automata
    app.kubernetes.io/component: backend

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: automata-app
  labels:
    app.kubernetes.io/name: automata
    app.kubernetes.io/component: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max